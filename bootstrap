#!/bin/sh

CANONPATH=`readlink -f $0`
BASE=`dirname $CANONPATH`
NGINX_VER="nginx-1.7"

# Base system installed binary dependencies
#
# python-dev 
# build-essential
# Oracle instant client: http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html
# OpenSSL development libraries
# ZLib development library - zilb1g-dev
# PCRE development library - libpcre3-dev
#

usage(){
cat 2>&1 << EOS
Usage: $0 -r <release level> [-v][-T][-h]

Creates and initializes project dependancies and configurations

where:
	-r <release level>	One of: 'development', 'testing', 'production'
	-v			Show verbose output.
	-T			Run unit tests.
	-h			Show this help info.
	
EOS
	exit 2
}


# Read options from command line arguments and translate options into variables

while getopts "r:vhT" arg; do
	case "$arg" in
		v)	VERBOSE=1;;
		T)	UNIT_TEST=1;;
		r)	RELEASE_LEVEL=$OPTARG;;
		h)	usage;;
		*)	usage;;
	esac
done

if  [ -z "$RELEASE_LEVEL" ]; then
	usage
fi

if [ "$RELEASE_LEVEL" = "testing" -o "$RELEASE_LEVEL" = "development" -o "$RELEASE_LEVEL" = "production" ]; then
	pass
else
	echo "Allowed release levels: 'development', 'testing', or 'production'"
	usage
fi

# Setup a Virtual Python environment if it does not already exist

if [ ! -d $BASE/venv ]; then
    mkdir $BASE/venv
    virtualenv -p python2.7 $BASE/venv
fi

# Help cx_Oracle find its way

LD_LIBRARY_PATH=$BASE/lib/oracle/instantclient_11_2.x86-64/; export LD_LIBRARY_PATH
ORACLE_HOME=$BASE/lib/oracle/instantclient_11_2.x86-64/; export ORACLE_HOME

# Activate environment and install dependencies
. $BASE/venv/bin/activate
pip install -r requirements.txt


# Get nginx if not already installed:

if [ ! -d $BASE/src ]; then mkdir $BASE/src; fi

# Get the PCRE library to support NGiNX rewrite rules

if [ ! -d $BASE/src/nginx ] || [ ! -d $BASE/nginx ]; then
        cd $BASE/src
        git clone https://github.com/nginx/nginx.git
        cd nginx; git checkout "$NGINX_VER"
        ./configure --prefix=$BASE/nginx --without-http_rewrite_module
        make
        make install
        cd $BASE
fi

if [ ! -d $BASE/var ]; then mkdir $BASE/var; fi

if [ ! -d $BASE/var/log ]; then mkdir $BASE/var/log; fi

if [ ! -d $BASE/var/log/uwsgi ]; then mkdir $BASE/var/log/uwsgi; fi

# Generate uWSGI config file from template
sed "s%BASE%$BASE%g" < $BASE/etc/uwsgi/uwsgi-emperor-template.ini > $BASE/etc/uwsgi/emperor.ini
sed "s%BASE%$BASE%g" < $BASE/etc/uwsgi/uwsgi-template.ini > $BASE/etc/uwsgi/vassals/buildings_app.ini
sed "s%BASE%$BASE%g" < $BASE/etc/uwsgi/uwsgi-template.ini > $BASE/etc/uwsgi/vassals/tokens_app.ini
sed "s%BASE%$BASE%g" < $BASE/etc/uwsgi/uwsgi-template.ini > $BASE/etc/uwsgi/vassals/health_app.ini

# Generate NginX config file from template
sed "s%BASE%$BASE%g" < $BASE/etc/nginx-template.conf > $BASE/nginx/conf/nginx.conf

# Add to our PYTHONPATH

if grep -q '^PYTHONPATH' $BASE/venv/bin/activate; then
	cp $BASE/venv/bin/activate $BASE/venv/bin/.activate
	grep -v '^PYTHONPATH' $BASE/venv/bin/.activate > $BASE/venv/bin/activate
fi

echo "PYTHONPATH=$BASE:$BASE/../etc; export PYTHONPATH" >> $BASE/venv/bin/activate

# Set the snOracle home

if grep -q '^ORACLE_HOME' $BASE/venv/bin/activate; then
	cp $BASE/venv/bin/activate $BASE/venv/bin/.activate
	grep -v '^ORACLE_HOME' $BASE/venv/bin/.activate > $BASE/venv/bin/activate
fi
echo "ORACLE_HOME=$BASE/lib/oracle/instantclient_11_2.x86-64/; export ORACLE_HOME" >> $BASE/venv/bin/activate

# Set the LD_LIBRARY_PATH (for Oracle)

if grep -q '^LD_LIBRARY_PATH' $BASE/venv/bin/activate; then
	cp $BASE/venv/bin/activate $BASE/venv/bin/.activate
	grep -v '^LD_LIBRARY_PATH' $BASE/venv/bin/.activate > $BASE/venv/bin/activate
fi
echo "LD_LIBRARY_PATH=$BASE/lib/oracle/instantclient_11_2.x86-64/; export LD_LIBRARY_PATH" >> $BASE/venv/bin/activate

# Set the release level for the environment

if grep -q '^RELEASE_LEVEL' $BASE/venv/bin/activate; then
	cp $BASE/venv/bin/activate $BASE/venv/bin/.activate
	grep -v '^RELEASE_LEVEL' $BASE/venv/bin/.activate > $BASE/venv/bin/activate
fi

echo "RELEASE_LEVEL=$RELEASE_LEVEL; export RELEASE_LEVEL" >> $BASE/venv/bin/activate

# Create the dir for a SQLite Db for testing

#if [ ! -d $BASE/db ]; then mkdir $BASE/db; fi
